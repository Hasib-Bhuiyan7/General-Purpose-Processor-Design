// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/29/2023 11:08:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Processor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Processor_vlg_sample_tst(
	A,
	B,
	Clock,
	data_in,
	DEC_Enable,
	FMS_reset,
	Reset_A,
	Reset_B,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  Clock;
input  data_in;
input  DEC_Enable;
input  FMS_reset;
input  Reset_A;
input  Reset_B;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or Clock or data_in or DEC_Enable or FMS_reset or Reset_A or Reset_B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Processor_vlg_check_tst (
	ATEST,
	BTEST,
	DECTEST,
	firstfourbits,
	lastfourbits,
	sign,
	student_id,
	TESTNUM1,
	TESTNUM2,
	sampler_rx
);
input [7:0] ATEST;
input [7:0] BTEST;
input [0:15] DECTEST;
input [1:7] firstfourbits;
input [1:7] lastfourbits;
input [1:7] sign;
input [0:6] student_id;
input [3:0] TESTNUM1;
input [3:0] TESTNUM2;
input sampler_rx;

reg [7:0] ATEST_expected;
reg [7:0] BTEST_expected;
reg [0:15] DECTEST_expected;
reg [1:7] firstfourbits_expected;
reg [1:7] lastfourbits_expected;
reg [1:7] sign_expected;
reg [0:6] student_id_expected;
reg [3:0] TESTNUM1_expected;
reg [3:0] TESTNUM2_expected;

reg [7:0] ATEST_prev;
reg [7:0] BTEST_prev;
reg [0:15] DECTEST_prev;
reg [1:7] firstfourbits_prev;
reg [1:7] lastfourbits_prev;
reg [1:7] sign_prev;
reg [0:6] student_id_prev;
reg [3:0] TESTNUM1_prev;
reg [3:0] TESTNUM2_prev;

reg [7:0] ATEST_expected_prev;
reg [7:0] BTEST_expected_prev;
reg [0:15] DECTEST_expected_prev;
reg [1:7] firstfourbits_expected_prev;
reg [1:7] lastfourbits_expected_prev;
reg [1:7] sign_expected_prev;
reg [3:0] TESTNUM1_expected_prev;
reg [3:0] TESTNUM2_expected_prev;

reg [7:0] last_ATEST_exp;
reg [7:0] last_BTEST_exp;
reg [0:15] last_DECTEST_exp;
reg [1:7] last_firstfourbits_exp;
reg [1:7] last_lastfourbits_exp;
reg [1:7] last_sign_exp;
reg [3:0] last_TESTNUM1_exp;
reg [3:0] last_TESTNUM2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	ATEST_prev = ATEST;
	BTEST_prev = BTEST;
	DECTEST_prev = DECTEST;
	firstfourbits_prev = firstfourbits;
	lastfourbits_prev = lastfourbits;
	sign_prev = sign;
	student_id_prev = student_id;
	TESTNUM1_prev = TESTNUM1;
	TESTNUM2_prev = TESTNUM2;
end

// update expected /o prevs

always @(trigger)
begin
	ATEST_expected_prev = ATEST_expected;
	BTEST_expected_prev = BTEST_expected;
	DECTEST_expected_prev = DECTEST_expected;
	firstfourbits_expected_prev = firstfourbits_expected;
	lastfourbits_expected_prev = lastfourbits_expected;
	sign_expected_prev = sign_expected;
	TESTNUM1_expected_prev = TESTNUM1_expected;
	TESTNUM2_expected_prev = TESTNUM2_expected;
end



// expected sign[1]
initial
begin
	sign_expected[1] = 1'bX;
end 

// expected sign[2]
initial
begin
	sign_expected[2] = 1'bX;
end 

// expected sign[3]
initial
begin
	sign_expected[3] = 1'bX;
end 

// expected sign[4]
initial
begin
	sign_expected[4] = 1'bX;
end 

// expected sign[5]
initial
begin
	sign_expected[5] = 1'bX;
end 

// expected sign[6]
initial
begin
	sign_expected[6] = 1'bX;
end 

// expected firstfourbits[1]
initial
begin
	firstfourbits_expected[1] = 1'bX;
end 

// expected firstfourbits[2]
initial
begin
	firstfourbits_expected[2] = 1'bX;
end 

// expected firstfourbits[3]
initial
begin
	firstfourbits_expected[3] = 1'bX;
end 

// expected firstfourbits[4]
initial
begin
	firstfourbits_expected[4] = 1'bX;
end 

// expected firstfourbits[5]
initial
begin
	firstfourbits_expected[5] = 1'bX;
end 

// expected firstfourbits[6]
initial
begin
	firstfourbits_expected[6] = 1'bX;
end 

// expected lastfourbits[1]
initial
begin
	lastfourbits_expected[1] = 1'bX;
end 

// expected lastfourbits[2]
initial
begin
	lastfourbits_expected[2] = 1'bX;
end 

// expected lastfourbits[3]
initial
begin
	lastfourbits_expected[3] = 1'bX;
end 

// expected lastfourbits[4]
initial
begin
	lastfourbits_expected[4] = 1'bX;
end 

// expected lastfourbits[5]
initial
begin
	lastfourbits_expected[5] = 1'bX;
end 

// expected lastfourbits[6]
initial
begin
	lastfourbits_expected[6] = 1'bX;
end 
// expected TESTNUM1[ 3 ]
initial
begin
	TESTNUM1_expected[3] = 1'bX;
end 
// expected TESTNUM1[ 2 ]
initial
begin
	TESTNUM1_expected[2] = 1'bX;
end 
// expected TESTNUM1[ 1 ]
initial
begin
	TESTNUM1_expected[1] = 1'bX;
end 
// expected TESTNUM1[ 0 ]
initial
begin
	TESTNUM1_expected[0] = 1'bX;
end 
// expected TESTNUM2[ 3 ]
initial
begin
	TESTNUM2_expected[3] = 1'bX;
end 
// expected TESTNUM2[ 2 ]
initial
begin
	TESTNUM2_expected[2] = 1'bX;
end 
// expected TESTNUM2[ 1 ]
initial
begin
	TESTNUM2_expected[1] = 1'bX;
end 
// expected TESTNUM2[ 0 ]
initial
begin
	TESTNUM2_expected[0] = 1'bX;
end 
// expected DECTEST[ 15 ]
initial
begin
	DECTEST_expected[15] = 1'bX;
end 
// expected DECTEST[ 14 ]
initial
begin
	DECTEST_expected[14] = 1'bX;
end 
// expected DECTEST[ 13 ]
initial
begin
	DECTEST_expected[13] = 1'bX;
end 
// expected DECTEST[ 12 ]
initial
begin
	DECTEST_expected[12] = 1'bX;
end 
// expected DECTEST[ 11 ]
initial
begin
	DECTEST_expected[11] = 1'bX;
end 
// expected DECTEST[ 10 ]
initial
begin
	DECTEST_expected[10] = 1'bX;
end 
// expected DECTEST[ 9 ]
initial
begin
	DECTEST_expected[9] = 1'bX;
end 
// expected DECTEST[ 8 ]
initial
begin
	DECTEST_expected[8] = 1'bX;
end 
// expected DECTEST[ 7 ]
initial
begin
	DECTEST_expected[7] = 1'bX;
end 
// expected DECTEST[ 6 ]
initial
begin
	DECTEST_expected[6] = 1'bX;
end 
// expected DECTEST[ 5 ]
initial
begin
	DECTEST_expected[5] = 1'bX;
end 
// expected DECTEST[ 4 ]
initial
begin
	DECTEST_expected[4] = 1'bX;
end 
// expected DECTEST[ 3 ]
initial
begin
	DECTEST_expected[3] = 1'bX;
end 
// expected DECTEST[ 2 ]
initial
begin
	DECTEST_expected[2] = 1'bX;
end 
// expected DECTEST[ 1 ]
initial
begin
	DECTEST_expected[1] = 1'bX;
end 
// expected DECTEST[ 0 ]
initial
begin
	DECTEST_expected[0] = 1'bX;
end 
// expected ATEST[ 7 ]
initial
begin
	ATEST_expected[7] = 1'bX;
end 
// expected ATEST[ 6 ]
initial
begin
	ATEST_expected[6] = 1'bX;
end 
// expected ATEST[ 5 ]
initial
begin
	ATEST_expected[5] = 1'bX;
end 
// expected ATEST[ 4 ]
initial
begin
	ATEST_expected[4] = 1'bX;
end 
// expected ATEST[ 3 ]
initial
begin
	ATEST_expected[3] = 1'bX;
end 
// expected ATEST[ 2 ]
initial
begin
	ATEST_expected[2] = 1'bX;
end 
// expected ATEST[ 1 ]
initial
begin
	ATEST_expected[1] = 1'bX;
end 
// expected ATEST[ 0 ]
initial
begin
	ATEST_expected[0] = 1'bX;
end 
// expected BTEST[ 7 ]
initial
begin
	BTEST_expected[7] = 1'bX;
end 
// expected BTEST[ 6 ]
initial
begin
	BTEST_expected[6] = 1'bX;
end 
// expected BTEST[ 5 ]
initial
begin
	BTEST_expected[5] = 1'bX;
end 
// expected BTEST[ 4 ]
initial
begin
	BTEST_expected[4] = 1'bX;
end 
// expected BTEST[ 3 ]
initial
begin
	BTEST_expected[3] = 1'bX;
end 
// expected BTEST[ 2 ]
initial
begin
	BTEST_expected[2] = 1'bX;
end 
// expected BTEST[ 1 ]
initial
begin
	BTEST_expected[1] = 1'bX;
end 
// expected BTEST[ 0 ]
initial
begin
	BTEST_expected[0] = 1'bX;
end 
// generate trigger
always @(ATEST_expected or ATEST or BTEST_expected or BTEST or DECTEST_expected or DECTEST or firstfourbits_expected or firstfourbits or lastfourbits_expected or lastfourbits or sign_expected or sign or student_id_expected or student_id or TESTNUM1_expected or TESTNUM1 or TESTNUM2_expected or TESTNUM2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ATEST = %b | expected BTEST = %b | expected DECTEST = %b | expected firstfourbits = %b | expected lastfourbits = %b | expected sign = %b | expected student_id = %b | expected TESTNUM1 = %b | expected TESTNUM2 = %b | ",ATEST_expected_prev,BTEST_expected_prev,DECTEST_expected_prev,firstfourbits_expected_prev,lastfourbits_expected_prev,sign_expected_prev,student_id_expected_prev,TESTNUM1_expected_prev,TESTNUM2_expected_prev);
	$display("| real ATEST = %b | real BTEST = %b | real DECTEST = %b | real firstfourbits = %b | real lastfourbits = %b | real sign = %b | real student_id = %b | real TESTNUM1 = %b | real TESTNUM2 = %b | ",ATEST_prev,BTEST_prev,DECTEST_prev,firstfourbits_prev,lastfourbits_prev,sign_prev,student_id_prev,TESTNUM1_prev,TESTNUM2_prev);
`endif
	if (
		( ATEST_expected_prev[0] !== 1'bx ) && ( ATEST_prev[0] !== ATEST_expected_prev[0] )
		&& ((ATEST_expected_prev[0] !== last_ATEST_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ATEST[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ATEST_expected_prev);
		$display ("     Real value = %b", ATEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ATEST_exp[0] = ATEST_expected_prev[0];
	end
	if (
		( ATEST_expected_prev[1] !== 1'bx ) && ( ATEST_prev[1] !== ATEST_expected_prev[1] )
		&& ((ATEST_expected_prev[1] !== last_ATEST_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ATEST[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ATEST_expected_prev);
		$display ("     Real value = %b", ATEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ATEST_exp[1] = ATEST_expected_prev[1];
	end
	if (
		( ATEST_expected_prev[2] !== 1'bx ) && ( ATEST_prev[2] !== ATEST_expected_prev[2] )
		&& ((ATEST_expected_prev[2] !== last_ATEST_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ATEST[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ATEST_expected_prev);
		$display ("     Real value = %b", ATEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ATEST_exp[2] = ATEST_expected_prev[2];
	end
	if (
		( ATEST_expected_prev[3] !== 1'bx ) && ( ATEST_prev[3] !== ATEST_expected_prev[3] )
		&& ((ATEST_expected_prev[3] !== last_ATEST_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ATEST[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ATEST_expected_prev);
		$display ("     Real value = %b", ATEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ATEST_exp[3] = ATEST_expected_prev[3];
	end
	if (
		( ATEST_expected_prev[4] !== 1'bx ) && ( ATEST_prev[4] !== ATEST_expected_prev[4] )
		&& ((ATEST_expected_prev[4] !== last_ATEST_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ATEST[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ATEST_expected_prev);
		$display ("     Real value = %b", ATEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ATEST_exp[4] = ATEST_expected_prev[4];
	end
	if (
		( ATEST_expected_prev[5] !== 1'bx ) && ( ATEST_prev[5] !== ATEST_expected_prev[5] )
		&& ((ATEST_expected_prev[5] !== last_ATEST_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ATEST[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ATEST_expected_prev);
		$display ("     Real value = %b", ATEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ATEST_exp[5] = ATEST_expected_prev[5];
	end
	if (
		( ATEST_expected_prev[6] !== 1'bx ) && ( ATEST_prev[6] !== ATEST_expected_prev[6] )
		&& ((ATEST_expected_prev[6] !== last_ATEST_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ATEST[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ATEST_expected_prev);
		$display ("     Real value = %b", ATEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ATEST_exp[6] = ATEST_expected_prev[6];
	end
	if (
		( ATEST_expected_prev[7] !== 1'bx ) && ( ATEST_prev[7] !== ATEST_expected_prev[7] )
		&& ((ATEST_expected_prev[7] !== last_ATEST_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ATEST[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ATEST_expected_prev);
		$display ("     Real value = %b", ATEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ATEST_exp[7] = ATEST_expected_prev[7];
	end
	if (
		( BTEST_expected_prev[0] !== 1'bx ) && ( BTEST_prev[0] !== BTEST_expected_prev[0] )
		&& ((BTEST_expected_prev[0] !== last_BTEST_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BTEST[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BTEST_expected_prev);
		$display ("     Real value = %b", BTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BTEST_exp[0] = BTEST_expected_prev[0];
	end
	if (
		( BTEST_expected_prev[1] !== 1'bx ) && ( BTEST_prev[1] !== BTEST_expected_prev[1] )
		&& ((BTEST_expected_prev[1] !== last_BTEST_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BTEST[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BTEST_expected_prev);
		$display ("     Real value = %b", BTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BTEST_exp[1] = BTEST_expected_prev[1];
	end
	if (
		( BTEST_expected_prev[2] !== 1'bx ) && ( BTEST_prev[2] !== BTEST_expected_prev[2] )
		&& ((BTEST_expected_prev[2] !== last_BTEST_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BTEST[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BTEST_expected_prev);
		$display ("     Real value = %b", BTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BTEST_exp[2] = BTEST_expected_prev[2];
	end
	if (
		( BTEST_expected_prev[3] !== 1'bx ) && ( BTEST_prev[3] !== BTEST_expected_prev[3] )
		&& ((BTEST_expected_prev[3] !== last_BTEST_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BTEST[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BTEST_expected_prev);
		$display ("     Real value = %b", BTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BTEST_exp[3] = BTEST_expected_prev[3];
	end
	if (
		( BTEST_expected_prev[4] !== 1'bx ) && ( BTEST_prev[4] !== BTEST_expected_prev[4] )
		&& ((BTEST_expected_prev[4] !== last_BTEST_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BTEST[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BTEST_expected_prev);
		$display ("     Real value = %b", BTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BTEST_exp[4] = BTEST_expected_prev[4];
	end
	if (
		( BTEST_expected_prev[5] !== 1'bx ) && ( BTEST_prev[5] !== BTEST_expected_prev[5] )
		&& ((BTEST_expected_prev[5] !== last_BTEST_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BTEST[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BTEST_expected_prev);
		$display ("     Real value = %b", BTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BTEST_exp[5] = BTEST_expected_prev[5];
	end
	if (
		( BTEST_expected_prev[6] !== 1'bx ) && ( BTEST_prev[6] !== BTEST_expected_prev[6] )
		&& ((BTEST_expected_prev[6] !== last_BTEST_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BTEST[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BTEST_expected_prev);
		$display ("     Real value = %b", BTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BTEST_exp[6] = BTEST_expected_prev[6];
	end
	if (
		( BTEST_expected_prev[7] !== 1'bx ) && ( BTEST_prev[7] !== BTEST_expected_prev[7] )
		&& ((BTEST_expected_prev[7] !== last_BTEST_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BTEST[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BTEST_expected_prev);
		$display ("     Real value = %b", BTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BTEST_exp[7] = BTEST_expected_prev[7];
	end
	if (
		( DECTEST_expected_prev[0] !== 1'bx ) && ( DECTEST_prev[0] !== DECTEST_expected_prev[0] )
		&& ((DECTEST_expected_prev[0] !== last_DECTEST_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECTEST[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECTEST_expected_prev);
		$display ("     Real value = %b", DECTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DECTEST_exp[0] = DECTEST_expected_prev[0];
	end
	if (
		( DECTEST_expected_prev[1] !== 1'bx ) && ( DECTEST_prev[1] !== DECTEST_expected_prev[1] )
		&& ((DECTEST_expected_prev[1] !== last_DECTEST_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECTEST[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECTEST_expected_prev);
		$display ("     Real value = %b", DECTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DECTEST_exp[1] = DECTEST_expected_prev[1];
	end
	if (
		( DECTEST_expected_prev[2] !== 1'bx ) && ( DECTEST_prev[2] !== DECTEST_expected_prev[2] )
		&& ((DECTEST_expected_prev[2] !== last_DECTEST_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECTEST[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECTEST_expected_prev);
		$display ("     Real value = %b", DECTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DECTEST_exp[2] = DECTEST_expected_prev[2];
	end
	if (
		( DECTEST_expected_prev[3] !== 1'bx ) && ( DECTEST_prev[3] !== DECTEST_expected_prev[3] )
		&& ((DECTEST_expected_prev[3] !== last_DECTEST_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECTEST[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECTEST_expected_prev);
		$display ("     Real value = %b", DECTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DECTEST_exp[3] = DECTEST_expected_prev[3];
	end
	if (
		( DECTEST_expected_prev[4] !== 1'bx ) && ( DECTEST_prev[4] !== DECTEST_expected_prev[4] )
		&& ((DECTEST_expected_prev[4] !== last_DECTEST_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECTEST[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECTEST_expected_prev);
		$display ("     Real value = %b", DECTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DECTEST_exp[4] = DECTEST_expected_prev[4];
	end
	if (
		( DECTEST_expected_prev[5] !== 1'bx ) && ( DECTEST_prev[5] !== DECTEST_expected_prev[5] )
		&& ((DECTEST_expected_prev[5] !== last_DECTEST_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECTEST[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECTEST_expected_prev);
		$display ("     Real value = %b", DECTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DECTEST_exp[5] = DECTEST_expected_prev[5];
	end
	if (
		( DECTEST_expected_prev[6] !== 1'bx ) && ( DECTEST_prev[6] !== DECTEST_expected_prev[6] )
		&& ((DECTEST_expected_prev[6] !== last_DECTEST_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECTEST[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECTEST_expected_prev);
		$display ("     Real value = %b", DECTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DECTEST_exp[6] = DECTEST_expected_prev[6];
	end
	if (
		( DECTEST_expected_prev[7] !== 1'bx ) && ( DECTEST_prev[7] !== DECTEST_expected_prev[7] )
		&& ((DECTEST_expected_prev[7] !== last_DECTEST_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECTEST[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECTEST_expected_prev);
		$display ("     Real value = %b", DECTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DECTEST_exp[7] = DECTEST_expected_prev[7];
	end
	if (
		( DECTEST_expected_prev[8] !== 1'bx ) && ( DECTEST_prev[8] !== DECTEST_expected_prev[8] )
		&& ((DECTEST_expected_prev[8] !== last_DECTEST_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECTEST[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECTEST_expected_prev);
		$display ("     Real value = %b", DECTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DECTEST_exp[8] = DECTEST_expected_prev[8];
	end
	if (
		( DECTEST_expected_prev[9] !== 1'bx ) && ( DECTEST_prev[9] !== DECTEST_expected_prev[9] )
		&& ((DECTEST_expected_prev[9] !== last_DECTEST_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECTEST[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECTEST_expected_prev);
		$display ("     Real value = %b", DECTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DECTEST_exp[9] = DECTEST_expected_prev[9];
	end
	if (
		( DECTEST_expected_prev[10] !== 1'bx ) && ( DECTEST_prev[10] !== DECTEST_expected_prev[10] )
		&& ((DECTEST_expected_prev[10] !== last_DECTEST_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECTEST[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECTEST_expected_prev);
		$display ("     Real value = %b", DECTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DECTEST_exp[10] = DECTEST_expected_prev[10];
	end
	if (
		( DECTEST_expected_prev[11] !== 1'bx ) && ( DECTEST_prev[11] !== DECTEST_expected_prev[11] )
		&& ((DECTEST_expected_prev[11] !== last_DECTEST_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECTEST[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECTEST_expected_prev);
		$display ("     Real value = %b", DECTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DECTEST_exp[11] = DECTEST_expected_prev[11];
	end
	if (
		( DECTEST_expected_prev[12] !== 1'bx ) && ( DECTEST_prev[12] !== DECTEST_expected_prev[12] )
		&& ((DECTEST_expected_prev[12] !== last_DECTEST_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECTEST[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECTEST_expected_prev);
		$display ("     Real value = %b", DECTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DECTEST_exp[12] = DECTEST_expected_prev[12];
	end
	if (
		( DECTEST_expected_prev[13] !== 1'bx ) && ( DECTEST_prev[13] !== DECTEST_expected_prev[13] )
		&& ((DECTEST_expected_prev[13] !== last_DECTEST_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECTEST[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECTEST_expected_prev);
		$display ("     Real value = %b", DECTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DECTEST_exp[13] = DECTEST_expected_prev[13];
	end
	if (
		( DECTEST_expected_prev[14] !== 1'bx ) && ( DECTEST_prev[14] !== DECTEST_expected_prev[14] )
		&& ((DECTEST_expected_prev[14] !== last_DECTEST_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECTEST[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECTEST_expected_prev);
		$display ("     Real value = %b", DECTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DECTEST_exp[14] = DECTEST_expected_prev[14];
	end
	if (
		( DECTEST_expected_prev[15] !== 1'bx ) && ( DECTEST_prev[15] !== DECTEST_expected_prev[15] )
		&& ((DECTEST_expected_prev[15] !== last_DECTEST_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECTEST[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECTEST_expected_prev);
		$display ("     Real value = %b", DECTEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DECTEST_exp[15] = DECTEST_expected_prev[15];
	end
	if (
		( firstfourbits_expected_prev[0] !== 1'bx ) && ( firstfourbits_prev[0] !== firstfourbits_expected_prev[0] )
		&& ((firstfourbits_expected_prev[0] !== last_firstfourbits_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port firstfourbits[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", firstfourbits_expected_prev);
		$display ("     Real value = %b", firstfourbits_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_firstfourbits_exp[0] = firstfourbits_expected_prev[0];
	end
	if (
		( firstfourbits_expected_prev[1] !== 1'bx ) && ( firstfourbits_prev[1] !== firstfourbits_expected_prev[1] )
		&& ((firstfourbits_expected_prev[1] !== last_firstfourbits_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port firstfourbits[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", firstfourbits_expected_prev);
		$display ("     Real value = %b", firstfourbits_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_firstfourbits_exp[1] = firstfourbits_expected_prev[1];
	end
	if (
		( firstfourbits_expected_prev[2] !== 1'bx ) && ( firstfourbits_prev[2] !== firstfourbits_expected_prev[2] )
		&& ((firstfourbits_expected_prev[2] !== last_firstfourbits_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port firstfourbits[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", firstfourbits_expected_prev);
		$display ("     Real value = %b", firstfourbits_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_firstfourbits_exp[2] = firstfourbits_expected_prev[2];
	end
	if (
		( firstfourbits_expected_prev[3] !== 1'bx ) && ( firstfourbits_prev[3] !== firstfourbits_expected_prev[3] )
		&& ((firstfourbits_expected_prev[3] !== last_firstfourbits_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port firstfourbits[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", firstfourbits_expected_prev);
		$display ("     Real value = %b", firstfourbits_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_firstfourbits_exp[3] = firstfourbits_expected_prev[3];
	end
	if (
		( firstfourbits_expected_prev[4] !== 1'bx ) && ( firstfourbits_prev[4] !== firstfourbits_expected_prev[4] )
		&& ((firstfourbits_expected_prev[4] !== last_firstfourbits_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port firstfourbits[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", firstfourbits_expected_prev);
		$display ("     Real value = %b", firstfourbits_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_firstfourbits_exp[4] = firstfourbits_expected_prev[4];
	end
	if (
		( firstfourbits_expected_prev[5] !== 1'bx ) && ( firstfourbits_prev[5] !== firstfourbits_expected_prev[5] )
		&& ((firstfourbits_expected_prev[5] !== last_firstfourbits_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port firstfourbits[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", firstfourbits_expected_prev);
		$display ("     Real value = %b", firstfourbits_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_firstfourbits_exp[5] = firstfourbits_expected_prev[5];
	end
	if (
		( firstfourbits_expected_prev[6] !== 1'bx ) && ( firstfourbits_prev[6] !== firstfourbits_expected_prev[6] )
		&& ((firstfourbits_expected_prev[6] !== last_firstfourbits_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port firstfourbits[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", firstfourbits_expected_prev);
		$display ("     Real value = %b", firstfourbits_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_firstfourbits_exp[6] = firstfourbits_expected_prev[6];
	end
	if (
		( lastfourbits_expected_prev[0] !== 1'bx ) && ( lastfourbits_prev[0] !== lastfourbits_expected_prev[0] )
		&& ((lastfourbits_expected_prev[0] !== last_lastfourbits_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lastfourbits[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lastfourbits_expected_prev);
		$display ("     Real value = %b", lastfourbits_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_lastfourbits_exp[0] = lastfourbits_expected_prev[0];
	end
	if (
		( lastfourbits_expected_prev[1] !== 1'bx ) && ( lastfourbits_prev[1] !== lastfourbits_expected_prev[1] )
		&& ((lastfourbits_expected_prev[1] !== last_lastfourbits_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lastfourbits[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lastfourbits_expected_prev);
		$display ("     Real value = %b", lastfourbits_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_lastfourbits_exp[1] = lastfourbits_expected_prev[1];
	end
	if (
		( lastfourbits_expected_prev[2] !== 1'bx ) && ( lastfourbits_prev[2] !== lastfourbits_expected_prev[2] )
		&& ((lastfourbits_expected_prev[2] !== last_lastfourbits_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lastfourbits[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lastfourbits_expected_prev);
		$display ("     Real value = %b", lastfourbits_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_lastfourbits_exp[2] = lastfourbits_expected_prev[2];
	end
	if (
		( lastfourbits_expected_prev[3] !== 1'bx ) && ( lastfourbits_prev[3] !== lastfourbits_expected_prev[3] )
		&& ((lastfourbits_expected_prev[3] !== last_lastfourbits_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lastfourbits[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lastfourbits_expected_prev);
		$display ("     Real value = %b", lastfourbits_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_lastfourbits_exp[3] = lastfourbits_expected_prev[3];
	end
	if (
		( lastfourbits_expected_prev[4] !== 1'bx ) && ( lastfourbits_prev[4] !== lastfourbits_expected_prev[4] )
		&& ((lastfourbits_expected_prev[4] !== last_lastfourbits_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lastfourbits[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lastfourbits_expected_prev);
		$display ("     Real value = %b", lastfourbits_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_lastfourbits_exp[4] = lastfourbits_expected_prev[4];
	end
	if (
		( lastfourbits_expected_prev[5] !== 1'bx ) && ( lastfourbits_prev[5] !== lastfourbits_expected_prev[5] )
		&& ((lastfourbits_expected_prev[5] !== last_lastfourbits_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lastfourbits[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lastfourbits_expected_prev);
		$display ("     Real value = %b", lastfourbits_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_lastfourbits_exp[5] = lastfourbits_expected_prev[5];
	end
	if (
		( lastfourbits_expected_prev[6] !== 1'bx ) && ( lastfourbits_prev[6] !== lastfourbits_expected_prev[6] )
		&& ((lastfourbits_expected_prev[6] !== last_lastfourbits_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lastfourbits[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lastfourbits_expected_prev);
		$display ("     Real value = %b", lastfourbits_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_lastfourbits_exp[6] = lastfourbits_expected_prev[6];
	end
	if (
		( sign_expected_prev[0] !== 1'bx ) && ( sign_prev[0] !== sign_expected_prev[0] )
		&& ((sign_expected_prev[0] !== last_sign_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sign_exp[0] = sign_expected_prev[0];
	end
	if (
		( sign_expected_prev[1] !== 1'bx ) && ( sign_prev[1] !== sign_expected_prev[1] )
		&& ((sign_expected_prev[1] !== last_sign_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sign_exp[1] = sign_expected_prev[1];
	end
	if (
		( sign_expected_prev[2] !== 1'bx ) && ( sign_prev[2] !== sign_expected_prev[2] )
		&& ((sign_expected_prev[2] !== last_sign_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sign_exp[2] = sign_expected_prev[2];
	end
	if (
		( sign_expected_prev[3] !== 1'bx ) && ( sign_prev[3] !== sign_expected_prev[3] )
		&& ((sign_expected_prev[3] !== last_sign_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sign_exp[3] = sign_expected_prev[3];
	end
	if (
		( sign_expected_prev[4] !== 1'bx ) && ( sign_prev[4] !== sign_expected_prev[4] )
		&& ((sign_expected_prev[4] !== last_sign_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sign_exp[4] = sign_expected_prev[4];
	end
	if (
		( sign_expected_prev[5] !== 1'bx ) && ( sign_prev[5] !== sign_expected_prev[5] )
		&& ((sign_expected_prev[5] !== last_sign_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sign_exp[5] = sign_expected_prev[5];
	end
	if (
		( sign_expected_prev[6] !== 1'bx ) && ( sign_prev[6] !== sign_expected_prev[6] )
		&& ((sign_expected_prev[6] !== last_sign_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sign_exp[6] = sign_expected_prev[6];
	end
	if (
		( TESTNUM1_expected_prev[0] !== 1'bx ) && ( TESTNUM1_prev[0] !== TESTNUM1_expected_prev[0] )
		&& ((TESTNUM1_expected_prev[0] !== last_TESTNUM1_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TESTNUM1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TESTNUM1_expected_prev);
		$display ("     Real value = %b", TESTNUM1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_TESTNUM1_exp[0] = TESTNUM1_expected_prev[0];
	end
	if (
		( TESTNUM1_expected_prev[1] !== 1'bx ) && ( TESTNUM1_prev[1] !== TESTNUM1_expected_prev[1] )
		&& ((TESTNUM1_expected_prev[1] !== last_TESTNUM1_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TESTNUM1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TESTNUM1_expected_prev);
		$display ("     Real value = %b", TESTNUM1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_TESTNUM1_exp[1] = TESTNUM1_expected_prev[1];
	end
	if (
		( TESTNUM1_expected_prev[2] !== 1'bx ) && ( TESTNUM1_prev[2] !== TESTNUM1_expected_prev[2] )
		&& ((TESTNUM1_expected_prev[2] !== last_TESTNUM1_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TESTNUM1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TESTNUM1_expected_prev);
		$display ("     Real value = %b", TESTNUM1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_TESTNUM1_exp[2] = TESTNUM1_expected_prev[2];
	end
	if (
		( TESTNUM1_expected_prev[3] !== 1'bx ) && ( TESTNUM1_prev[3] !== TESTNUM1_expected_prev[3] )
		&& ((TESTNUM1_expected_prev[3] !== last_TESTNUM1_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TESTNUM1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TESTNUM1_expected_prev);
		$display ("     Real value = %b", TESTNUM1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_TESTNUM1_exp[3] = TESTNUM1_expected_prev[3];
	end
	if (
		( TESTNUM2_expected_prev[0] !== 1'bx ) && ( TESTNUM2_prev[0] !== TESTNUM2_expected_prev[0] )
		&& ((TESTNUM2_expected_prev[0] !== last_TESTNUM2_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TESTNUM2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TESTNUM2_expected_prev);
		$display ("     Real value = %b", TESTNUM2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_TESTNUM2_exp[0] = TESTNUM2_expected_prev[0];
	end
	if (
		( TESTNUM2_expected_prev[1] !== 1'bx ) && ( TESTNUM2_prev[1] !== TESTNUM2_expected_prev[1] )
		&& ((TESTNUM2_expected_prev[1] !== last_TESTNUM2_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TESTNUM2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TESTNUM2_expected_prev);
		$display ("     Real value = %b", TESTNUM2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_TESTNUM2_exp[1] = TESTNUM2_expected_prev[1];
	end
	if (
		( TESTNUM2_expected_prev[2] !== 1'bx ) && ( TESTNUM2_prev[2] !== TESTNUM2_expected_prev[2] )
		&& ((TESTNUM2_expected_prev[2] !== last_TESTNUM2_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TESTNUM2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TESTNUM2_expected_prev);
		$display ("     Real value = %b", TESTNUM2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_TESTNUM2_exp[2] = TESTNUM2_expected_prev[2];
	end
	if (
		( TESTNUM2_expected_prev[3] !== 1'bx ) && ( TESTNUM2_prev[3] !== TESTNUM2_expected_prev[3] )
		&& ((TESTNUM2_expected_prev[3] !== last_TESTNUM2_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TESTNUM2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TESTNUM2_expected_prev);
		$display ("     Real value = %b", TESTNUM2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_TESTNUM2_exp[3] = TESTNUM2_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module Processor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg Clock;
reg data_in;
reg DEC_Enable;
reg FMS_reset;
reg Reset_A;
reg Reset_B;
// wires                                               
wire [7:0] ATEST;
wire [7:0] BTEST;
wire [0:15] DECTEST;
wire [1:7] firstfourbits;
wire [1:7] lastfourbits;
wire [1:7] sign;
wire [0:6] student_id;
wire [3:0] TESTNUM1;
wire [3:0] TESTNUM2;

wire sampler;                             

// assign statements (if any)                          
Processor i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.ATEST(ATEST),
	.B(B),
	.BTEST(BTEST),
	.Clock(Clock),
	.data_in(data_in),
	.DEC_Enable(DEC_Enable),
	.DECTEST(DECTEST),
	.firstfourbits(firstfourbits),
	.FMS_reset(FMS_reset),
	.lastfourbits(lastfourbits),
	.Reset_A(Reset_A),
	.Reset_B(Reset_B),
	.sign(sign),
	.student_id(student_id),
	.TESTNUM1(TESTNUM1),
	.TESTNUM2(TESTNUM2)
);

// Clock
initial
begin
	Clock = 1'b1;
	Clock = #220000 1'b0;
	Clock = #60000 1'b1;
	Clock = #30000 1'b0;
	Clock = #150000 1'b1;
	Clock = #180000 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b1;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

// Reset_A
initial
begin
	Reset_A = 1'b0;
end 

// Reset_B
initial
begin
	Reset_B = 1'b0;
end 

// data_in
initial
begin
	data_in = 1'b0;
end 

// FMS_reset
initial
begin
	FMS_reset = 1'b0;
end 

// DEC_Enable
initial
begin
	DEC_Enable = 1'b0;
end 

Processor_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.Clock(Clock),
	.data_in(data_in),
	.DEC_Enable(DEC_Enable),
	.FMS_reset(FMS_reset),
	.Reset_A(Reset_A),
	.Reset_B(Reset_B),
	.sampler_tx(sampler)
);

Processor_vlg_check_tst tb_out(
	.ATEST(ATEST),
	.BTEST(BTEST),
	.DECTEST(DECTEST),
	.firstfourbits(firstfourbits),
	.lastfourbits(lastfourbits),
	.sign(sign),
	.student_id(student_id),
	.TESTNUM1(TESTNUM1),
	.TESTNUM2(TESTNUM2),
	.sampler_rx(sampler)
);
endmodule

